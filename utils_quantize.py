#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun 24 18:21:14 2021

@author: lab716a
"""

#------------------------------------------------------------------------------
# TCQ quantization 
#------------------------------------------------------------------------------


# TCQ from Meer
from utils_TCQ import *
import tensorflow as tf


# TODO 
#merge into a unique function that does everyhing 
#
#seq_enc, sqnr, mu, s= compress(seq, rate, memory, lc_coeff, c_scale)
#            
#seq_dec = decompress(seq_enc, rate, memory, lc_coeff, mu, s, c_scale)
          


#------------------------------------------------------------------------------
# uniform scalar quantization 
#------------------------------------------------------------------------------


def compress_uni_scalar(seq, R):
    
  uni_max = seq.max()
  uni_min = seq.min()

  #number of quantization levels at users
  
  seq_enc=seq.copy()
  
  seq_enc=np.round((2**R)*(seq_enc-uni_min)/(uni_max-uni_min),decimals=0).astype(int)

#  seq_tmp=(seq_tmp-uni_min)/(uni_max-uni_min)
#  seq_tmp=(2**R)*(seq_tmp-uni_min)/(uni_max-uni_min)
#  print(seq_tmp.max(),seq_tmp.min())
#  
    
  return seq_enc, uni_max, uni_min


def decompress_uni_scalar(seq_enc, R, uni_max, uni_min):

  # quantized_points = weights_min+((weights_max-weights_min)/QL[user])*(np.round((weights[i]-weights_min)*QL[user]/(weights_max-weights_min)))
  seq_dec=seq_enc/2**R*(uni_max-uni_min)+uni_min
  
  return seq_dec

def gaussian_compress(seq, R):
  gaussian_vector = np.array([-4.6196578, -4.20406252, -3.94402975, -3.75079307, -3.5953369, -3.46436624,
                              -3.35063227, -3.2497293, -3.15877116, -3.0757602, -2.99925406, -2.92817589,
                              -2.86169959, -2.7991769, -2.74008942, -2.68401579, -2.63060866, -2.5795782,
                              -2.5306799, -2.48370554, -2.43847626, -2.39483721, -2.35265344, -2.31180655,
                              -2.27219208, -2.23371738, -2.19629984, -2.15986555, -2.12434801, -2.08968723,
                              -2.05582886, -2.02272351, -1.99032614, -1.95859558, -1.92749408, -1.89698692,
                              -1.86704212, -1.83763012, -1.80872358, -1.78029712, -1.75232714, -1.72479169,
                              -1.69767026, -1.67094371, -1.6445941, -1.61860462, -1.5929595, -1.56764388,
                              -1.54264381, -1.5179461, -1.49353831, -1.4694087, -1.44554614, -1.42194008,
                              -1.39858054, -1.37545804, -1.35256354, -1.32988848, -1.30742468, -1.28516437,
                              -1.26310011, -1.24122482, -1.21953171, -1.19801432, -1.17666642, -1.1554821,
                              -1.13445564, -1.11358158, -1.09285468, -1.07226989, -1.05182237, -1.03150746,
                              -1.01132066, -0.99125765, -0.97131425, -0.95148645, -0.93177036, -0.91216223,
                              -0.89265843, -0.87325546, -0.85394992, -0.83473853, -0.8156181, -0.79658554,
                              -0.77763786, -0.75877215, -0.73998559, -0.72127543, -0.70263901, -0.68407373,
                              -0.66557706, -0.64714654, -0.62877977, -0.6104744, -0.59222817, -0.57403882,
                              -0.55590419, -0.53782214, -0.51979059, -0.50180749, -0.48387086, -0.46597872,
                              -0.44812917, -0.4303203, -0.41255028, -0.39481728, -0.37711951, -0.35945521,
                              -0.34182265, -0.32422013, -0.30664595, -0.28909847, -0.27157603, -0.25407702,
                              -0.23659984, -0.2191429, -0.20170463, -0.18428348, -0.16687792, -0.1494864,
                              -0.13210741, -0.11473945, -0.09738101, -0.08003061, -0.06268674, -0.04534794,
                              -0.02801273, -0.01067962, 0.00665285, 0.02398615, 0.04132176, 0.05866116,
                              0.07600582, 0.09335722, 0.11071686, 0.12808621, 0.14546679, 0.1628601,
                              0.18026766, 0.197691, 0.21513166, 0.23259119, 0.25007116, 0.26757317,
                              0.2850988, 0.30264968, 0.32022745, 0.33783377, 0.35547032, 0.37313882,
                              0.39084099, 0.4085786, 0.42635343, 0.4441673, 0.46202207, 0.47991963,
                              0.49786188, 0.5158508, 0.53388839, 0.55197667, 0.57011774, 0.58831374,
                              0.60656683, 0.62487926, 0.6432533, 0.6616913, 0.68019565, 0.69876883,
                              0.71741336, 0.73613183, 0.75492692, 0.77380137, 0.79275801, 0.81179973,
                              0.83092955, 0.85015054, 0.86946589, 0.88887889, 0.90839294, 0.92801154,
                              0.94773831, 0.96757702, 0.98753154, 1.0076059, 1.02780428, 1.04813099,
                              1.06859054, 1.08918758, 1.10992696, 1.13081373, 1.15185314, 1.17305064,
                              1.19441195, 1.215943, 1.23764999, 1.25953941, 1.28161805, 1.30389298,
                              1.32637164, 1.34906181, 1.37197168, 1.3951098, 1.41848522, 1.44210741,
                              1.46598637, 1.49013265, 1.51455738, 1.5392723, 1.56428986, 1.58962324,
                              1.61528642, 1.64129425, 1.6676625, 1.694408, 1.72154868, 1.7491037,
                              1.77709356, 1.80554024, 1.83446733, 1.86390022, 1.89386626, 1.92439503,
                              1.95551852, 1.98727144, 2.01969157, 2.0528201, 2.08670208, 2.12138691,
                              2.15692896, 2.19338826, 2.23083129, 2.26933204, 2.3089731, 2.34984718,
                              2.39205876, 2.43572629, 2.48098477, 2.52798909, 2.57691818, 2.62798033,
                              2.68142012, 2.7375275, 2.79664992, 2.85920888, 2.92572296, 2.99684061,
                              3.07338823, 3.156443, 3.24744772, 3.3484007, 3.46218897, 3.59321959,
                              3.74874351, 3.94205964, 4.20219183, 4.61793112])
  l = len(gaussian_vector)
  step = np.divide(l, 2 ** R)
  print(step.astype(int))
  gaussian_vector_stepped = gaussian_vector[0:l:step.astype('int')]
  mu = np.mean(seq)
  s = np.var(seq)
  seq_scaled = np.divide(seq - mu, np.power(s, 0.5))
  seq_compressed = np.zeros(np.shape(seq_scaled))
  for i in range(len(gaussian_vector_stepped) - 1):
    diff1 = seq_scaled - gaussian_vector_stepped[i]
    diff2 = seq_scaled - gaussian_vector_stepped[i + 1]
    indices1 = tf.where((diff1 >= 0) & (diff2 <= 0) & ((diff1 + diff2) <= 0))
    indices2 = tf.where((diff1 >= 0) & (diff2 <= 0) & ((diff1 + diff2) >= 0))
    np.put(seq_compressed, indices1, gaussian_vector_stepped[i])
    np.put(seq_compressed, indices2, gaussian_vector_stepped[i + 1])
    return seq_compressed, mu, s

def decompress_gaussian(seq_compressed, mu, s):
    seq_dec = np.multiply(seq_compressed,np.power(s,0.5))+mu
    return seq_dec

def optimal_compress(seq,R):
    mu = np.mean(seq)
    s = np.var(seq)
    noise_var =np.divide(1,np.power(2,np.multiply(2,R)))
    seq_scaled = np.divide(seq - mu, np.power(s, 0.5))
    noise = np.random.normal(0, np.power(noise_var,0.5), len(seq_scaled))
    seq_compressed = seq_scaled+noise
    return seq_compressed, mu, s

